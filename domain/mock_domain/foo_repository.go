// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ishkawa/wire_example/domain (interfaces: FooRepository)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/ishkawa/wire_example/domain"
	reflect "reflect"
)

// MockFooRepository is a mock of FooRepository interface
type MockFooRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFooRepositoryMockRecorder
}

// MockFooRepositoryMockRecorder is the mock recorder for MockFooRepository
type MockFooRepositoryMockRecorder struct {
	mock *MockFooRepository
}

// NewMockFooRepository creates a new mock instance
func NewMockFooRepository(ctrl *gomock.Controller) *MockFooRepository {
	mock := &MockFooRepository{ctrl: ctrl}
	mock.recorder = &MockFooRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFooRepository) EXPECT() *MockFooRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockFooRepository) Get(arg0 context.Context, arg1 int64) (*domain.Foo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Foo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFooRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFooRepository)(nil).Get), arg0, arg1)
}

// Put mocks base method
func (m *MockFooRepository) Put(arg0 context.Context, arg1 *domain.Foo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockFooRepositoryMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFooRepository)(nil).Put), arg0, arg1)
}
